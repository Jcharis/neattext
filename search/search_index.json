{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"neattext NeatText:a simple NLP package for cleaning textual data and text preprocessing Problem Cleaning of unstructured text data Reduce noise [special characters,stopwords] Reducing repetition of using the same code for text preprocessing Solution convert the already known solution for cleaning text into a reuseable package Installation pip install neattext Usage The OOP Way(Object Oriented Way) NeatText offers 4 main classes for working with text data TextFrame : a frame-like object for cleaning text TextCleaner: remove or replace specifics TextExtractor: extract unwanted text data TextMetrics: word stats and metrics Overall Components of NeatText Using TextFrame Keeps the text as TextFrame object. This allows us to do more with our text. It inherits the benefits of the TextCleaner and the TextMetrics out of the box with some additional features for handling text data. This is the simplest way for text preprocessing with this library alternatively you can utilize the other classes too. >>> import neattext as nt >> mytext = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a.\" >>> docx = nt.TextFrame(text=mytext) >>> docx.text \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a.\" >>> >>> docx.describe() Key Value Length : 73 vowels : 21 consonants: 34 stopwords: 4 punctuations: 8 special_char: 8 tokens(whitespace): 10 tokens(words): 14 >>> >>> docx.length 73 >>> # Scan Percentage of Noise(Unclean data) in text >>> d.noise_scan() {'text_noise': 19.17808219178082, 'text_length': 73, 'noise_count': 14} >>> >>> docs.head(16) 'This is the mail' >>> docx.tail() >>> docx.count_vowels() >>> docx.count_stopwords() >>> docx.count_consonants() >>> docx.nlongest() >>> docx.nshortest() >>> docx.readability() Basic NLP Task (Tokenization,Ngram,Text Generation) >>> docx.word_tokens() >>> >>> docx.sent_tokens() >>> >>> docx.term_freq() >>> >>> docx.bow() Basic Text Preprocessing >>> docx.normalize() 'this is the mail example@gmail.com ,our website is https://example.com \ud83d\ude0a.' >>> docx.normalize(level='deep') 'this is the mail examplegmailcom our website is httpsexamplecom ' >>> docx.remove_puncts() >>> docx.remove_stopwords() >>> docx.remove_html_tags() >>> docx.remove_special_characters() >>> docx.remove_emojis() >>> docx.fix_contractions() Handling Files with NeatText Read txt file directly into TextFrame >>> import neattext as nt >>> docx_df = nt.read_txt('file.txt') Alternatively you can instantiate a TextFrame and read a text file into it >>> import neattext as nt >>> docx_df = nt.TextFrame().read_txt('file.txt') Chaining Methods on TextFrame >>> t1 = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a and it will cost $100 to subscribe.\" >>> docx = TextFrame(t1) >>> result = docx.remove_emails().remove_urls().remove_emojis() >>> print(result) 'This is the mail ,our WEBSITE is and it will cost $100 to subscribe.' Clean Text Clean text by removing emails,numbers,stopwords,emojis,etc A simplified method for cleaning text by specifying as True/False what to clean from a text >>> from neattext.functions import clean_text >>> >>> mytext = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a.\" >>> >>> clean_text(mytext) 'mail example@gmail.com ,our website https://example.com .' You can remove punctuations,stopwords,urls,emojis,multiple_whitespaces,etc by setting them to True. You can choose to remove or not remove punctuations by setting to True/False respectively >>> clean_text(mytext,puncts=True) 'mail example@gmailcom website https://examplecom ' >>> >>> clean_text(mytext,puncts=False) 'mail example@gmail.com ,our website https://example.com .' >>> >>> clean_text(mytext,puncts=False,stopwords=False) 'this is the mail example@gmail.com ,our website is https://example.com .' >>> You can also remove the other non-needed items accordingly >>> clean_text(mytext,stopwords=False) 'this is the mail example@gmail.com ,our website is https://example.com .' >>> >>> clean_text(mytext,urls=False) 'mail example@gmail.com ,our website https://example.com .' >>> >>> clean_text(mytext,urls=True) 'mail example@gmail.com ,our website .' >>> Removing Punctuations [A Very Common Text Preprocessing Step] You remove the most common punctuations such as fullstop,comma,exclamation marks and question marks by setting most_common=True which is the default Alternatively you can also remove all known punctuations from a text. >>> import neattext as nt >>> mytext = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a. Please don't forget the email when you enter !!!!!\" >>> docx = nt.TextFrame(mytext) >>> docx.remove_puncts() TextFrame(text=\"This is the mail example@gmailcom our WEBSITE is https://examplecom \ud83d\ude0a Please dont forget the email when you enter \") >>> docx.remove_puncts(most_common=False) TextFrame(text=\"This is the mail examplegmailcom our WEBSITE is httpsexamplecom \ud83d\ude0a Please dont forget the email when you enter \") Removing Stopwords [A Very Common Text Preprocessing Step] You can remove stopwords from a text by specifying the language. The default language is English Supported Languages include English(en),Spanish(es),French(fr)|Russian(ru)|Yoruba(yo)|German(de) >>> import neattext as nt >>> mytext = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a. Please don't forget the email when you enter !!!!!\" >>> docx = nt.TextFrame(mytext) >>> docx.remove_stopwords(lang='en') TextFrame(text=\"mail example@gmail.com ,our WEBSITE https://example.com \ud83d\ude0a. forget email enter !!!!!\") Remove Emails,Numbers,Phone Numbers,Dates,Btc Address,VisaCard Address,etc >>> print(docx.remove_emails()) >>> 'This is the mail ,our WEBSITE is https://example.com \ud83d\ude0a.' >>> >>> print(docx.remove_stopwords()) >>> 'This mail example@gmail.com ,our WEBSITE https://example.com \ud83d\ude0a.' >>> >>> print(docx.remove_numbers()) >>> docx.remove_phone_numbers() >>> docx.remove_btc_address() Remove Special Characters >>> docx.remove_special_characters() Remove Emojis >>> print(docx.remove_emojis()) >>> 'This is the mail example@gmail.com ,our WEBSITE is https://example.com .' Remove Custom Pattern You can also specify your own custom pattern, incase you cannot find what you need in the functions using the remove_custom_pattern() function >>> import neattext.functions as nfx >>> ex = \"Last !RT tweeter multiple &#7777\" >>> >>> nfx.remove_custom_pattern(e,r'&#\\d+') 'Last !RT tweeter multiple ' Replace Emails,Numbers,Phone Numbers >>> docx.replace_emails() >>> docx.replace_numbers() >>> docx.replace_phone_numbers() Chain Multiple Methods >>> t1 = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a and it will cost $100 to subscribe.\" >>> docx = TextCleaner(t1) >>> result = docx.remove_emails().remove_urls().remove_emojis() >>> print(result) 'This is the mail ,our WEBSITE is and it will cost $100 to subscribe.' Using TextExtractor To Extract emails,phone numbers,numbers,urls,emojis from text >>> from neattext import TextExtractor >>> docx = TextExtractor() >>> docx.text = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a.\" >>> docx.extract_emails() >>> ['example@gmail.com'] >>> >>> docx.extract_emojis() >>> ['\ud83d\ude0a'] Using TextMetrics To Find the Words Stats such as counts of vowels,consonants,stopwords,word-stats >>> from neattext import TextMetrics >>> docx = TextMetrics() >>> docx.text = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a.\" >>> docx.count_vowels() >>> docx.count_consonants() >>> docx.count_stopwords() >>> docx.word_stats() Usage The MOP(method/function oriented way) Way >>> from neattext.functions import clean_text,extract_emails >>> t1 = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com .\" >>> clean_text(t1,puncts=True,stopwords=True) >>>'this mail examplegmailcom website httpsexamplecom' >>> extract_emails(t1) >>> ['example@gmail.com'] Alternatively you can also use this approach >>> import neattext.functions as nfx >>> t1 = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com .\" >>> nfx.clean_text(t1,puncts=True,stopwords=True) >>>'this mail examplegmailcom website httpsexamplecom' >>> nfx.extract_emails(t1) >>> ['example@gmail.com'] Explainer Explain an emoji or unicode for emoji emoji_explainer() emojify() unicode_2_emoji() >>> from neattext.explainer import emojify >>> emojify('Smiley') >>> '\ud83d\ude03' >>> from neattext.explainer import emoji_explainer >>> emoji_explainer('\ud83d\ude03') >>> 'SMILING FACE WITH OPEN MOUTH' >>> from neattext.explainer import unicode_2_emoji >>> unicode_2_emoji('0x1f49b') 'FLUSHED FACE' Documentation Please read the documentation for more information on what neattext does and how to use is for your needs.You can also check out our readthedocs page here More Features To Add basic nlp task currency normalizer Acknowledgements Inspired by packages like clean-text from Johannes Fillter and textify by JCharisTech NB Contributions Are Welcomed Notice a bug, please let us know. Thanks A lot By Jesse E.Agbe(JCharis) Jesus Saves @JCharisTech","title":"Home"},{"location":"#neattext","text":"NeatText:a simple NLP package for cleaning textual data and text preprocessing","title":"neattext"},{"location":"#problem","text":"Cleaning of unstructured text data Reduce noise [special characters,stopwords] Reducing repetition of using the same code for text preprocessing","title":"Problem"},{"location":"#solution","text":"convert the already known solution for cleaning text into a reuseable package","title":"Solution"},{"location":"#installation","text":"pip install neattext","title":"Installation"},{"location":"#usage","text":"The OOP Way(Object Oriented Way) NeatText offers 4 main classes for working with text data TextFrame : a frame-like object for cleaning text TextCleaner: remove or replace specifics TextExtractor: extract unwanted text data TextMetrics: word stats and metrics","title":"Usage"},{"location":"#overall-components-of-neattext","text":"","title":"Overall Components of NeatText"},{"location":"#using-textframe","text":"Keeps the text as TextFrame object. This allows us to do more with our text. It inherits the benefits of the TextCleaner and the TextMetrics out of the box with some additional features for handling text data. This is the simplest way for text preprocessing with this library alternatively you can utilize the other classes too. >>> import neattext as nt >> mytext = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a.\" >>> docx = nt.TextFrame(text=mytext) >>> docx.text \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a.\" >>> >>> docx.describe() Key Value Length : 73 vowels : 21 consonants: 34 stopwords: 4 punctuations: 8 special_char: 8 tokens(whitespace): 10 tokens(words): 14 >>> >>> docx.length 73 >>> # Scan Percentage of Noise(Unclean data) in text >>> d.noise_scan() {'text_noise': 19.17808219178082, 'text_length': 73, 'noise_count': 14} >>> >>> docs.head(16) 'This is the mail' >>> docx.tail() >>> docx.count_vowels() >>> docx.count_stopwords() >>> docx.count_consonants() >>> docx.nlongest() >>> docx.nshortest() >>> docx.readability()","title":"Using TextFrame"},{"location":"#basic-nlp-task-tokenizationngramtext-generation","text":">>> docx.word_tokens() >>> >>> docx.sent_tokens() >>> >>> docx.term_freq() >>> >>> docx.bow()","title":"Basic NLP Task (Tokenization,Ngram,Text Generation)"},{"location":"#basic-text-preprocessing","text":">>> docx.normalize() 'this is the mail example@gmail.com ,our website is https://example.com \ud83d\ude0a.' >>> docx.normalize(level='deep') 'this is the mail examplegmailcom our website is httpsexamplecom ' >>> docx.remove_puncts() >>> docx.remove_stopwords() >>> docx.remove_html_tags() >>> docx.remove_special_characters() >>> docx.remove_emojis() >>> docx.fix_contractions()","title":"Basic Text Preprocessing"},{"location":"#handling-files-with-neattext","text":"Read txt file directly into TextFrame >>> import neattext as nt >>> docx_df = nt.read_txt('file.txt') Alternatively you can instantiate a TextFrame and read a text file into it >>> import neattext as nt >>> docx_df = nt.TextFrame().read_txt('file.txt')","title":"Handling Files with NeatText"},{"location":"#chaining-methods-on-textframe","text":">>> t1 = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a and it will cost $100 to subscribe.\" >>> docx = TextFrame(t1) >>> result = docx.remove_emails().remove_urls().remove_emojis() >>> print(result) 'This is the mail ,our WEBSITE is and it will cost $100 to subscribe.'","title":"Chaining Methods on TextFrame"},{"location":"#clean-text","text":"Clean text by removing emails,numbers,stopwords,emojis,etc A simplified method for cleaning text by specifying as True/False what to clean from a text >>> from neattext.functions import clean_text >>> >>> mytext = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a.\" >>> >>> clean_text(mytext) 'mail example@gmail.com ,our website https://example.com .' You can remove punctuations,stopwords,urls,emojis,multiple_whitespaces,etc by setting them to True. You can choose to remove or not remove punctuations by setting to True/False respectively >>> clean_text(mytext,puncts=True) 'mail example@gmailcom website https://examplecom ' >>> >>> clean_text(mytext,puncts=False) 'mail example@gmail.com ,our website https://example.com .' >>> >>> clean_text(mytext,puncts=False,stopwords=False) 'this is the mail example@gmail.com ,our website is https://example.com .' >>> You can also remove the other non-needed items accordingly >>> clean_text(mytext,stopwords=False) 'this is the mail example@gmail.com ,our website is https://example.com .' >>> >>> clean_text(mytext,urls=False) 'mail example@gmail.com ,our website https://example.com .' >>> >>> clean_text(mytext,urls=True) 'mail example@gmail.com ,our website .' >>>","title":"Clean Text"},{"location":"#removing-punctuations-a-very-common-text-preprocessing-step","text":"You remove the most common punctuations such as fullstop,comma,exclamation marks and question marks by setting most_common=True which is the default Alternatively you can also remove all known punctuations from a text. >>> import neattext as nt >>> mytext = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a. Please don't forget the email when you enter !!!!!\" >>> docx = nt.TextFrame(mytext) >>> docx.remove_puncts() TextFrame(text=\"This is the mail example@gmailcom our WEBSITE is https://examplecom \ud83d\ude0a Please dont forget the email when you enter \") >>> docx.remove_puncts(most_common=False) TextFrame(text=\"This is the mail examplegmailcom our WEBSITE is httpsexamplecom \ud83d\ude0a Please dont forget the email when you enter \")","title":"Removing Punctuations [A Very Common Text Preprocessing Step]"},{"location":"#removing-stopwords-a-very-common-text-preprocessing-step","text":"You can remove stopwords from a text by specifying the language. The default language is English Supported Languages include English(en),Spanish(es),French(fr)|Russian(ru)|Yoruba(yo)|German(de) >>> import neattext as nt >>> mytext = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a. Please don't forget the email when you enter !!!!!\" >>> docx = nt.TextFrame(mytext) >>> docx.remove_stopwords(lang='en') TextFrame(text=\"mail example@gmail.com ,our WEBSITE https://example.com \ud83d\ude0a. forget email enter !!!!!\")","title":"Removing Stopwords [A Very Common Text Preprocessing Step]"},{"location":"#remove-emailsnumbersphone-numbersdatesbtc-addressvisacard-addressetc","text":">>> print(docx.remove_emails()) >>> 'This is the mail ,our WEBSITE is https://example.com \ud83d\ude0a.' >>> >>> print(docx.remove_stopwords()) >>> 'This mail example@gmail.com ,our WEBSITE https://example.com \ud83d\ude0a.' >>> >>> print(docx.remove_numbers()) >>> docx.remove_phone_numbers() >>> docx.remove_btc_address()","title":"Remove Emails,Numbers,Phone Numbers,Dates,Btc Address,VisaCard Address,etc"},{"location":"#remove-special-characters","text":">>> docx.remove_special_characters()","title":"Remove Special Characters"},{"location":"#remove-emojis","text":">>> print(docx.remove_emojis()) >>> 'This is the mail example@gmail.com ,our WEBSITE is https://example.com .'","title":"Remove Emojis"},{"location":"#remove-custom-pattern","text":"You can also specify your own custom pattern, incase you cannot find what you need in the functions using the remove_custom_pattern() function >>> import neattext.functions as nfx >>> ex = \"Last !RT tweeter multiple &#7777\" >>> >>> nfx.remove_custom_pattern(e,r'&#\\d+') 'Last !RT tweeter multiple '","title":"Remove Custom Pattern"},{"location":"#replace-emailsnumbersphone-numbers","text":">>> docx.replace_emails() >>> docx.replace_numbers() >>> docx.replace_phone_numbers()","title":"Replace Emails,Numbers,Phone Numbers"},{"location":"#chain-multiple-methods","text":">>> t1 = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a and it will cost $100 to subscribe.\" >>> docx = TextCleaner(t1) >>> result = docx.remove_emails().remove_urls().remove_emojis() >>> print(result) 'This is the mail ,our WEBSITE is and it will cost $100 to subscribe.'","title":"Chain Multiple Methods"},{"location":"#using-textextractor","text":"To Extract emails,phone numbers,numbers,urls,emojis from text >>> from neattext import TextExtractor >>> docx = TextExtractor() >>> docx.text = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a.\" >>> docx.extract_emails() >>> ['example@gmail.com'] >>> >>> docx.extract_emojis() >>> ['\ud83d\ude0a']","title":"Using TextExtractor"},{"location":"#using-textmetrics","text":"To Find the Words Stats such as counts of vowels,consonants,stopwords,word-stats >>> from neattext import TextMetrics >>> docx = TextMetrics() >>> docx.text = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a.\" >>> docx.count_vowels() >>> docx.count_consonants() >>> docx.count_stopwords() >>> docx.word_stats()","title":"Using TextMetrics"},{"location":"#usage_1","text":"The MOP(method/function oriented way) Way >>> from neattext.functions import clean_text,extract_emails >>> t1 = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com .\" >>> clean_text(t1,puncts=True,stopwords=True) >>>'this mail examplegmailcom website httpsexamplecom' >>> extract_emails(t1) >>> ['example@gmail.com'] Alternatively you can also use this approach >>> import neattext.functions as nfx >>> t1 = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com .\" >>> nfx.clean_text(t1,puncts=True,stopwords=True) >>>'this mail examplegmailcom website httpsexamplecom' >>> nfx.extract_emails(t1) >>> ['example@gmail.com']","title":"Usage"},{"location":"#explainer","text":"Explain an emoji or unicode for emoji emoji_explainer() emojify() unicode_2_emoji() >>> from neattext.explainer import emojify >>> emojify('Smiley') >>> '\ud83d\ude03' >>> from neattext.explainer import emoji_explainer >>> emoji_explainer('\ud83d\ude03') >>> 'SMILING FACE WITH OPEN MOUTH' >>> from neattext.explainer import unicode_2_emoji >>> unicode_2_emoji('0x1f49b') 'FLUSHED FACE'","title":"Explainer"},{"location":"#documentation","text":"Please read the documentation for more information on what neattext does and how to use is for your needs.You can also check out our readthedocs page here","title":"Documentation"},{"location":"#more-features-to-add","text":"basic nlp task currency normalizer","title":"More Features To Add"},{"location":"#acknowledgements","text":"Inspired by packages like clean-text from Johannes Fillter and textify by JCharisTech","title":"Acknowledgements"},{"location":"#nb","text":"Contributions Are Welcomed Notice a bug, please let us know. Thanks A lot","title":"NB"},{"location":"#by","text":"Jesse E.Agbe(JCharis) Jesus Saves @JCharisTech","title":"By"},{"location":"about/","text":"About Neattext is part of the NEAT Project developed by JCharisTech NEAT stands for \"New Experimental Application of Technology\". The available packages and libraries under the NEAT Project include + NeatText + NeatBio + NeatUtils About Neattext Neattext is a text cleaning NLP packge for working with Natural Language Processing Projects and task. It consist of several text cleaning functions and methods unified in one package for performing text preprocessing. It is maintained by Jesse E.Agbe(JCharis), however other contributors are welcome. Jesus Saves @JCharisTech","title":"About"},{"location":"about/#about","text":"Neattext is part of the NEAT Project developed by JCharisTech NEAT stands for \"New Experimental Application of Technology\". The available packages and libraries under the NEAT Project include + NeatText + NeatBio + NeatUtils","title":"About"},{"location":"about/#about-neattext","text":"Neattext is a text cleaning NLP packge for working with Natural Language Processing Projects and task. It consist of several text cleaning functions and methods unified in one package for performing text preprocessing. It is maintained by Jesse E.Agbe(JCharis), however other contributors are welcome. Jesus Saves @JCharisTech","title":"About Neattext"},{"location":"apireference/","text":"API reference This page gives an overview of all neattext objects,functions and methods. Main Class TextFrame TextCleaner TextExtractor TextMetrics General Functions For TextCleaner : remove remove_emails remove_emails remove_numbers remove_phone_numbers remove_urls remove_special_characters remove_emojis remove_stopwords For TextCleaner : replace replace_emails replace_numbers replace_phone_numbers replace_urls replace_special_characters replace_emojis replace_stopwords For TextExtract : extract extract_emails extract_numbers extract_phone_numbers extract_urls extract_special_characters extract_emojis extract_stopwords For TextMetrics : word statistics and counts count_vowels count_consonants count_stopwords word_stats TextFrame The neattext TextFrame API is a frame-like class useful for cleaning text.It inherits all the methods of the TextCleaner hence it can be used for removing or replacing emails,numbers,phone numbers,special characters,emojis,etc It can receive a text file and process it for a better output. TextFrame(text=None) TextCleaner The neattext TextCleaner API is a class useful for cleaning text by either removing or replacing emails,numbers,phone numbers,special characters,emojis,etc TextCleaner(text=None) TextExtractor The neattext TextExtractor API is a class useful for extracting as a list emails,numbers,phone numbers,special characters,emojis,etc . In other word the same things that you would want cleaned or removed.In that case when you use the TextExtractor class you inherit all the methods of the TextCleaning class. TextExtractor(text=None) TextMetrics The neattext TextMetrics API is a class useful for cleaning text by either removing or replacing emails,numbers,phone numbers,special characters,emojis,etc TextMetrics(text=None) TextCleaner remove methods remove_emails Clean text by using custom regex to remove emails remove_numbers Clean text by using custom regex to remove numbers and digits remove_phone_numbers Clean text by using custom regex to remove phone numbers remove_urls Clean text by using custom regex to remove urls and websites remove_special_characters Clean text by using custom regex to remove special characters remove_emojis Clean text by using custom regex to remove emojis and unicode representing emojis remove_stopwords Clean text by using custom regex to remove english stopwords TextCleaner replace methods replace_emails Processes text by using custom regex to replace emails replace_numbers Processes text by using custom regex to replace numbers and digits replace_phone_numbers Processes text by using custom regex to replace phone numbers replace_urls Processes text by using custom regex to replace urls and websites replace_special_characters Processes text by using custom regex to replace special characters replace_emojis Processes text by using custom regex to replace emojis and unicode representing emojis replace_stopwords Processes text by using custom regex to replace english stopwords TextExtractor Methods extract_emails Works on text by using custom regex to extract emails extract_numbers Works on text by using custom regex to extract numbers and digits extract_phone_numbers Works on text by using custom regex to extract phone numbers extract_urls Works on text by using custom regex to extract urls and websites extract_special_characters Works on text by using custom regex to extract special characters extract_emojis Works on text by using custom regex to extract emojis and unicode representing emojis extract_stopwords Works on text by using custom regex to extract english stopwords TextFrame Basics read_text Reads a text file and Creates A TextFrame for cleaning text describe Gives a basic description of the text which includes length,tokens,vowel and consonant count,etc head Returns the first N characters in a text tail Returns the last N characters in a text normalize Normalizes a text using two levels(shallow and deep) that removes all necessary noise to generate a clean text word_tokens Generate a word token of the text supplied using white-space or words sent_tokens Generate a sentence token of the text supplied ngrams Generate an N-gram of the text supplied bow Generate a simple bag of words of text","title":"API Guide"},{"location":"apireference/#api-reference","text":"This page gives an overview of all neattext objects,functions and methods.","title":"API reference"},{"location":"apireference/#main-class","text":"TextFrame TextCleaner TextExtractor TextMetrics","title":"Main Class"},{"location":"apireference/#general-functions","text":"","title":"General Functions"},{"location":"apireference/#for-textcleaner-remove","text":"remove_emails remove_emails remove_numbers remove_phone_numbers remove_urls remove_special_characters remove_emojis remove_stopwords","title":"For TextCleaner : remove"},{"location":"apireference/#for-textcleaner-replace","text":"replace_emails replace_numbers replace_phone_numbers replace_urls replace_special_characters replace_emojis replace_stopwords","title":"For TextCleaner : replace"},{"location":"apireference/#for-textextract-extract","text":"extract_emails extract_numbers extract_phone_numbers extract_urls extract_special_characters extract_emojis extract_stopwords","title":"For TextExtract : extract"},{"location":"apireference/#for-textmetrics-word-statistics-and-counts","text":"count_vowels count_consonants count_stopwords word_stats TextFrame The neattext TextFrame API is a frame-like class useful for cleaning text.It inherits all the methods of the TextCleaner hence it can be used for removing or replacing emails,numbers,phone numbers,special characters,emojis,etc It can receive a text file and process it for a better output. TextFrame(text=None) TextCleaner The neattext TextCleaner API is a class useful for cleaning text by either removing or replacing emails,numbers,phone numbers,special characters,emojis,etc TextCleaner(text=None) TextExtractor The neattext TextExtractor API is a class useful for extracting as a list emails,numbers,phone numbers,special characters,emojis,etc . In other word the same things that you would want cleaned or removed.In that case when you use the TextExtractor class you inherit all the methods of the TextCleaning class. TextExtractor(text=None) TextMetrics The neattext TextMetrics API is a class useful for cleaning text by either removing or replacing emails,numbers,phone numbers,special characters,emojis,etc TextMetrics(text=None)","title":"For TextMetrics : word statistics and counts"},{"location":"apireference/#textcleaner-remove-methods","text":"remove_emails Clean text by using custom regex to remove emails remove_numbers Clean text by using custom regex to remove numbers and digits remove_phone_numbers Clean text by using custom regex to remove phone numbers remove_urls Clean text by using custom regex to remove urls and websites remove_special_characters Clean text by using custom regex to remove special characters remove_emojis Clean text by using custom regex to remove emojis and unicode representing emojis remove_stopwords Clean text by using custom regex to remove english stopwords","title":"TextCleaner remove methods"},{"location":"apireference/#textcleaner-replace-methods","text":"replace_emails Processes text by using custom regex to replace emails replace_numbers Processes text by using custom regex to replace numbers and digits replace_phone_numbers Processes text by using custom regex to replace phone numbers replace_urls Processes text by using custom regex to replace urls and websites replace_special_characters Processes text by using custom regex to replace special characters replace_emojis Processes text by using custom regex to replace emojis and unicode representing emojis replace_stopwords Processes text by using custom regex to replace english stopwords","title":"TextCleaner replace methods"},{"location":"apireference/#textextractor-methods","text":"extract_emails Works on text by using custom regex to extract emails extract_numbers Works on text by using custom regex to extract numbers and digits extract_phone_numbers Works on text by using custom regex to extract phone numbers extract_urls Works on text by using custom regex to extract urls and websites extract_special_characters Works on text by using custom regex to extract special characters extract_emojis Works on text by using custom regex to extract emojis and unicode representing emojis extract_stopwords Works on text by using custom regex to extract english stopwords","title":"TextExtractor Methods"},{"location":"apireference/#textframe-basics","text":"read_text Reads a text file and Creates A TextFrame for cleaning text describe Gives a basic description of the text which includes length,tokens,vowel and consonant count,etc head Returns the first N characters in a text tail Returns the last N characters in a text normalize Normalizes a text using two levels(shallow and deep) that removes all necessary noise to generate a clean text word_tokens Generate a word token of the text supplied using white-space or words sent_tokens Generate a sentence token of the text supplied ngrams Generate an N-gram of the text supplied bow Generate a simple bag of words of text","title":"TextFrame Basics"},{"location":"contributing/","text":"Contributing First of all, thanks for taking the time to contribute! The following is a set of guidelines for contributing to NeatText text cleaning package, which are hosted on GitHub. These are mostly guidelines, not rules. Use your best judgment, and feel free to propose changes to this document in a pull request. How Can I Contribute? There are several ways you can contribute however here are some areas you can make your contribution Bug Report In case you notice a bug you can submit a bug report If you also have the fix for the bug you can also let us know Documentation Docs are essential to software development,your input is highly recommended. It can be grammatical errors, syntax error or semantic. Please let us know Enhancements & Feature Request You can offer enhancement suggestion for NeatText, including completely new features and minor improvements to existing functionality.","title":"Contributing"},{"location":"contributing/#contributing","text":"First of all, thanks for taking the time to contribute! The following is a set of guidelines for contributing to NeatText text cleaning package, which are hosted on GitHub. These are mostly guidelines, not rules. Use your best judgment, and feel free to propose changes to this document in a pull request.","title":"Contributing"},{"location":"contributing/#how-can-i-contribute","text":"There are several ways you can contribute however here are some areas you can make your contribution","title":"How Can I Contribute?"},{"location":"contributing/#bug-report","text":"In case you notice a bug you can submit a bug report If you also have the fix for the bug you can also let us know","title":"Bug Report"},{"location":"contributing/#documentation","text":"Docs are essential to software development,your input is highly recommended. It can be grammatical errors, syntax error or semantic. Please let us know","title":"Documentation"},{"location":"contributing/#enhancements-feature-request","text":"You can offer enhancement suggestion for NeatText, including completely new features and minor improvements to existing functionality.","title":"Enhancements &amp; Feature Request"},{"location":"userguide/","text":"The User Guide The User Guide documentation begins with some background information about NeatText, then focuses on step-by-step instructions for getting the most out of NeatText. Getting Started Installation of NeatText Neattext is availble on PyPI hence you can use pip to install it as follows pip install neattext or specifically for a python version as such python3 -m pip install neattext Quick Start After install neattext with pypi, you can use neattext in two main ways - the OOP way or the Method Oriented way. Neattext is designed to be used either via an object oriented approach or a functional/method oriented approach. Usage via The OOP Way(Object Oriented Way) Neattext comes with 3 main class or objects for cleaning text and doing your text preprocessing.These classes include: TextCleaner : For cleaning text by either removing or replacing the specific noise eg. emails,special characters,numbers,urls,emojis TextExtractor : For extracting certain terms from a text or document TextMetrics : For checking some basic word statics or metrics such as the count of vowels,consonants,stopwords,etc >>> from neattext import TextCleaner,TextExtractor,TextMetrics >>> docx = TextCleaner() >>> docx.text = \"your text goes here\" >>> docx.clean_text() Usage via the OOP way - Object Oriented Way (General usage) Text Preprocessing Preprocess texts and clean text >>> import neattext as nt >>> mytext = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a.\" >>> docx = nt.TextFrame(mytext) >>> docx.describe() Key Value Length : 73 vowels : 21 consonants: 34 stopwords: 4 punctuations: 8 special_char: 8 tokens(whitespace): 10 tokens(words): 14 >>> >>> docx.head(16) 'This is the mail' >>> docx.tail(16) '//example.com \ud83d\ude0a.' >>> >>> docx.normalize() 'this is the mail example@gmail.com ,our website is https://example.com \ud83d\ude0a.' >>> docx.normalize(level='deep') 'this is the mail examplegmailcom our website is httpsexamplecom ' >>> docx.remove_emojis() Simple NLP Task You can also do some basic Natural Language Preprocessing task such as tokenization,ngrams,text generation,etc >>> docx.word_tokens() Clean Text using the Method Oriented Approach Clean text by removing emails,numbers,stopwords,emojis,etc A simple method for cleaning text by specifying as True/False what to clean from a text. >>> from neattext.functions import clean_text >>> >>> mytext = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a.\" >>> >>> clean_text(mytext) 'mail example@gmail.com ,our website https://example.com .' You can remove punctuations,stopwords,urls,emojis,multiple_whitespaces,etc by setting them to True. You can choose to remove or not remove punctuations by setting to True/False respectively >>> clean_text(mytext,puncts=True) 'mail example@gmailcom website https://examplecom ' >>> >>> clean_text(mytext,puncts=False) 'mail example@gmail.com ,our website https://example.com .' >>> >>> clean_text(mytext,puncts=False,stopwords=False) 'this is the mail example@gmail.com ,our website is https://example.com .' >>> You can also remove the other non-needed items accordingly >>> clean_text(mytext,stopwords=False) 'this is the mail example@gmail.com ,our website is https://example.com .' >>> >>> clean_text(mytext,urls=False) 'mail example@gmail.com ,our website https://example.com .' >>> >>> clean_text(mytext,urls=True) 'mail example@gmail.com ,our website .' >>> Remove Punctuations [A Very Common Text Preprocessing Step] You remove the most common punctuations such as fullstop,comma,exclamation marks and question marks by setting most_common=True which is the default Alternatively you can also remove all known punctuations from a text. >>> import neattext as nt >>> mytext = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a. Please don't forget the email when you enter !!!!!\" >>> docx = nt.TextFrame(mytext) >>> docx.remove_puncts() TextFrame(text=\"This is the mail example@gmailcom our WEBSITE is https://examplecom \ud83d\ude0a Please dont forget the email when you enter \") >>> docx.remove_puncts(most_common=False) TextFrame(text=\"This is the mail examplegmailcom our WEBSITE is httpsexamplecom \ud83d\ude0a Please dont forget the email when you enter \") Remove Emails,Numbers,Phone Numbers >>> from neattext import TextCleaner >>> docx = TextCleaner() >>> docx.text = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a.\" >>> docx.remove_emails() >>> 'This is the mail ,our WEBSITE is https://example.com \ud83d\ude0a.' >>> >>> docx.remove_stopwords() >>> 'This mail example@gmail.com ,our WEBSITE https://example.com \ud83d\ude0a.' >>> >>> docx.remove_numbers() >>> docx.remove_phone_numbers() Remove Special Characters >>> docx.remove_special_characters() Remove Emojis >>> from neattext import TextCleaner >>> docx = TextCleaner() >>> docx.text = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a.\" >>> docx.remove_emojis() >>> 'This is the mail example@gmail.com ,our WEBSITE is https://example.com .' Replace Emails,Numbers,Phone Numbers >>> from neattext import TextCleaner >>> docx = TextCleaner() >>> docx.text = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a.\" >>> docx.replace_emails() >>> docx.replace_numbers() >>> docx.replace_phone_numbers() Using TextExtractor To Extract emails,phone numbers,numbers,urls,emojis from text >>> from neattext import TextExtractor >>> docx = TextExtractor() >>> docx.text = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a.\" >>> docx.extract_emails() >>> ['example@gmail.com'] >>> >>> docx.extract_emojis() >>> ['\ud83d\ude0a'] Using TextMetrics To Find the Words Stats such as counts of vowels,consonants,stopwords,word-stats >>> from neattext import TextMetrics >>> docx = TextMetrics() >>> docx.text = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a.\" >>> docx.count_vowels() >>> docx.count_consonants() >>> docx.count_stopwords() >>> docx.word_stats() Usage via the MOP(Method/Function Oriented Way) If you are a fun of functions you can also use neattext in such a manner using the functions sub-package. In that case you will have to import as this >>> from neattext.functions import remove_emails,remove_emojis,clean_text You can also use the import as feature. >>> import neattext.functions as ntf >>> ntf.remove_emails(your_text) >>> >>> from neattext.functions import clean_text,extract_emails >>> t1 = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com .\" >>> clean_text(t1,puncts=True,stopwords=True) >>>'this mail examplegmailcom website httpsexamplecom' >>> extract_emails(t1) >>> ['example@gmail.com'] Alternatively you can also use this approach >>> import neattext.functions as nfx >>> t1 = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com .\" >>> nfx.clean_text(t1,puncts=True,stopwords=True) >>>'this mail examplegmailcom website httpsexamplecom' >>> nfx.extract_emails(t1) >>> ['example@gmail.com']","title":"User Guide"},{"location":"userguide/#the-user-guide","text":"The User Guide documentation begins with some background information about NeatText, then focuses on step-by-step instructions for getting the most out of NeatText.","title":"The User Guide"},{"location":"userguide/#getting-started","text":"","title":"Getting Started"},{"location":"userguide/#installation-of-neattext","text":"Neattext is availble on PyPI hence you can use pip to install it as follows pip install neattext or specifically for a python version as such python3 -m pip install neattext","title":"Installation of NeatText"},{"location":"userguide/#quick-start","text":"After install neattext with pypi, you can use neattext in two main ways - the OOP way or the Method Oriented way. Neattext is designed to be used either via an object oriented approach or a functional/method oriented approach.","title":"Quick Start"},{"location":"userguide/#usage-via-the-oop-wayobject-oriented-way","text":"Neattext comes with 3 main class or objects for cleaning text and doing your text preprocessing.These classes include: TextCleaner : For cleaning text by either removing or replacing the specific noise eg. emails,special characters,numbers,urls,emojis TextExtractor : For extracting certain terms from a text or document TextMetrics : For checking some basic word statics or metrics such as the count of vowels,consonants,stopwords,etc >>> from neattext import TextCleaner,TextExtractor,TextMetrics >>> docx = TextCleaner() >>> docx.text = \"your text goes here\" >>> docx.clean_text()","title":"Usage via The OOP Way(Object Oriented Way)"},{"location":"userguide/#usage-via-the-oop-way-object-oriented-way-general-usage","text":"","title":"Usage via the OOP way - Object Oriented Way (General usage)"},{"location":"userguide/#text-preprocessing","text":"Preprocess texts and clean text >>> import neattext as nt >>> mytext = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a.\" >>> docx = nt.TextFrame(mytext) >>> docx.describe() Key Value Length : 73 vowels : 21 consonants: 34 stopwords: 4 punctuations: 8 special_char: 8 tokens(whitespace): 10 tokens(words): 14 >>> >>> docx.head(16) 'This is the mail' >>> docx.tail(16) '//example.com \ud83d\ude0a.' >>> >>> docx.normalize() 'this is the mail example@gmail.com ,our website is https://example.com \ud83d\ude0a.' >>> docx.normalize(level='deep') 'this is the mail examplegmailcom our website is httpsexamplecom ' >>> docx.remove_emojis()","title":"Text Preprocessing"},{"location":"userguide/#simple-nlp-task","text":"You can also do some basic Natural Language Preprocessing task such as tokenization,ngrams,text generation,etc >>> docx.word_tokens()","title":"Simple NLP Task"},{"location":"userguide/#clean-text-using-the-method-oriented-approach","text":"Clean text by removing emails,numbers,stopwords,emojis,etc A simple method for cleaning text by specifying as True/False what to clean from a text. >>> from neattext.functions import clean_text >>> >>> mytext = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a.\" >>> >>> clean_text(mytext) 'mail example@gmail.com ,our website https://example.com .' You can remove punctuations,stopwords,urls,emojis,multiple_whitespaces,etc by setting them to True. You can choose to remove or not remove punctuations by setting to True/False respectively >>> clean_text(mytext,puncts=True) 'mail example@gmailcom website https://examplecom ' >>> >>> clean_text(mytext,puncts=False) 'mail example@gmail.com ,our website https://example.com .' >>> >>> clean_text(mytext,puncts=False,stopwords=False) 'this is the mail example@gmail.com ,our website is https://example.com .' >>> You can also remove the other non-needed items accordingly >>> clean_text(mytext,stopwords=False) 'this is the mail example@gmail.com ,our website is https://example.com .' >>> >>> clean_text(mytext,urls=False) 'mail example@gmail.com ,our website https://example.com .' >>> >>> clean_text(mytext,urls=True) 'mail example@gmail.com ,our website .' >>>","title":"Clean Text using the Method Oriented Approach"},{"location":"userguide/#remove-punctuations-a-very-common-text-preprocessing-step","text":"You remove the most common punctuations such as fullstop,comma,exclamation marks and question marks by setting most_common=True which is the default Alternatively you can also remove all known punctuations from a text. >>> import neattext as nt >>> mytext = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a. Please don't forget the email when you enter !!!!!\" >>> docx = nt.TextFrame(mytext) >>> docx.remove_puncts() TextFrame(text=\"This is the mail example@gmailcom our WEBSITE is https://examplecom \ud83d\ude0a Please dont forget the email when you enter \") >>> docx.remove_puncts(most_common=False) TextFrame(text=\"This is the mail examplegmailcom our WEBSITE is httpsexamplecom \ud83d\ude0a Please dont forget the email when you enter \")","title":"Remove Punctuations [A Very Common Text Preprocessing Step]"},{"location":"userguide/#remove-emailsnumbersphone-numbers","text":">>> from neattext import TextCleaner >>> docx = TextCleaner() >>> docx.text = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a.\" >>> docx.remove_emails() >>> 'This is the mail ,our WEBSITE is https://example.com \ud83d\ude0a.' >>> >>> docx.remove_stopwords() >>> 'This mail example@gmail.com ,our WEBSITE https://example.com \ud83d\ude0a.' >>> >>> docx.remove_numbers() >>> docx.remove_phone_numbers()","title":"Remove Emails,Numbers,Phone Numbers"},{"location":"userguide/#remove-special-characters","text":">>> docx.remove_special_characters()","title":"Remove Special Characters"},{"location":"userguide/#remove-emojis","text":">>> from neattext import TextCleaner >>> docx = TextCleaner() >>> docx.text = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a.\" >>> docx.remove_emojis() >>> 'This is the mail example@gmail.com ,our WEBSITE is https://example.com .'","title":"Remove Emojis"},{"location":"userguide/#replace-emailsnumbersphone-numbers","text":">>> from neattext import TextCleaner >>> docx = TextCleaner() >>> docx.text = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a.\" >>> docx.replace_emails() >>> docx.replace_numbers() >>> docx.replace_phone_numbers()","title":"Replace Emails,Numbers,Phone Numbers"},{"location":"userguide/#using-textextractor","text":"To Extract emails,phone numbers,numbers,urls,emojis from text >>> from neattext import TextExtractor >>> docx = TextExtractor() >>> docx.text = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a.\" >>> docx.extract_emails() >>> ['example@gmail.com'] >>> >>> docx.extract_emojis() >>> ['\ud83d\ude0a']","title":"Using TextExtractor"},{"location":"userguide/#using-textmetrics","text":"To Find the Words Stats such as counts of vowels,consonants,stopwords,word-stats >>> from neattext import TextMetrics >>> docx = TextMetrics() >>> docx.text = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com \ud83d\ude0a.\" >>> docx.count_vowels() >>> docx.count_consonants() >>> docx.count_stopwords() >>> docx.word_stats()","title":"Using TextMetrics"},{"location":"userguide/#usage-via-the-mopmethodfunction-oriented-way","text":"If you are a fun of functions you can also use neattext in such a manner using the functions sub-package. In that case you will have to import as this >>> from neattext.functions import remove_emails,remove_emojis,clean_text You can also use the import as feature. >>> import neattext.functions as ntf >>> ntf.remove_emails(your_text) >>> >>> from neattext.functions import clean_text,extract_emails >>> t1 = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com .\" >>> clean_text(t1,puncts=True,stopwords=True) >>>'this mail examplegmailcom website httpsexamplecom' >>> extract_emails(t1) >>> ['example@gmail.com'] Alternatively you can also use this approach >>> import neattext.functions as nfx >>> t1 = \"This is the mail example@gmail.com ,our WEBSITE is https://example.com .\" >>> nfx.clean_text(t1,puncts=True,stopwords=True) >>>'this mail examplegmailcom website httpsexamplecom' >>> nfx.extract_emails(t1) >>> ['example@gmail.com']","title":"Usage via the MOP(Method/Function Oriented Way)"}]}